import re
import csv

def parse_interfaces_with_speed(file_contents):
    """
    Parses the contents of the 'show interfaces' command output from a Cisco switch
    and extracts key information for each interface, including "Last input" and "speed",
    with separate columns for the interface name, interface status, link status, last input, and speed.
    
    Args:
    file_contents (str): The full text of the 'show interfaces' command output.
    
    Returns:
    list of dict: A list where each element is a dictionary containing the extracted
                  information for each interface.
    """
    # Splitting the file contents into sections for each interface
    interface_sections = re.split(r'\n(?=\S)', file_contents)
    
    # Pattern to extract the relevant information
    patterns = {
        'hardware': r'Hardware is (\S+), address is (\S+)',
        'mtu': r'MTU (\d+) bytes',
        'bandwidth': r'BW (\d+) Kbit\/sec',
        'delay': r'DLY (\d+) usec',
        'reliability': r'reliability (\d+)\/(\d+)',
        'txload': r'txload (\d+)\/(\d+)',
        'rxload': r'rxload (\d+)\/(\d+)',
        'encapsulation': r'Encapsulation (\S+)',
        'loopback': r'loopback not set',
        'keepalive': r'Keepalive not set',
        'speed': r', (Auto-speed|\d+Mbit\/s|\d+Mb\/s),',
        'duplex': r'(Auto-duplex|\S+ duplex)',
        'arp_type': r'ARP type: (\S+), ARP Timeout (\S+)',
        'input_rate': r'5 minute input rate (\d+) bits\/sec',
        'output_rate': r'5 minute output rate (\d+) bits\/sec',
        'input_errors': r'(\d+) input errors',
        'output_errors': r'(\d+) output errors',
        'last_input': r'Last input (\S+),'
    }

    # List to hold the extracted data for each interface
    parsed_data = []

    # Process each interface section
    for section in interface_sections:
        data = {}
        interface_details_match = re.search(r'(\S+) is (up|down|administratively down), line protocol is (up|down)', section, re.MULTILINE)
        if interface_details_match:
            data['interface_name'] = interface_details_match.group(1)
            data['admin_status'] = interface_details_match.group(2)
            data['link_status'] = interface_details_match.group(3)
        else:
            # If no match is found, we'll continue to the next section as it might not be an interface description
            continue
        
        # Extract other details
        for key, pattern in patterns.items():
            match = re.search(pattern, section, re.MULTILINE)
            if match:
                if 'loopback' in key or 'keepalive' in key:  # These patterns do not have match groups
                    data[key] = 'not set'
                else:
                    data[key] = match.group(1)
            else:
                data[key] = None
        parsed_data.append(data)

    return parsed_data

# Replace 'file_path' with the path to your text file
file_path = 'C:\\Users\\amith\\Desktop\\Py\\show interfaces.txt'

# Reading the file and parsing the contents
with open(file_path, 'r') as file:
    file_contents = file.read()
parsed_interfaces_with_speed = parse_interfaces_with_speed(file_contents)

# Define the new columns, including separate columns for interface name, admin status, link status, last input, and speed
csv_columns_with_speed = ['interface_name', 'admin_status', 'link_status', 'last_input', 'speed'] + \
    [col for col in parsed_interfaces_with_speed[0].keys() if col not in {'interface_name', 'admin_status', 'link_status', 'last_input', 'speed'}]

# Replace 'csv_file_path' with the desired path for your CSV file
csv_file_path = 'C:\\Users\\amith\\Desktop\\Py\\show_interfaces.csv'

# Writing the parsed data to a CSV file with separate columns for interface details
with open(csv_file_path, mode='w', newline='') as file:
    writer = csv.DictWriter(file, fieldnames=csv_columns_with_speed)
    writer.writeheader()
    for data in parsed_interfaces_with_speed:
        writer.writerow(data)

print(f"Data parsed and written to {csv_file_path}")
