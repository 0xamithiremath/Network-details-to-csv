import tkinter as tk
from tkinter import filedialog
from tkinter import messagebox
import re
import csv

def parse_interfaces_with_speed(file_contents):
    # The function to parse the file contents and extract interface details
    # Add your parsing logic here
    # Example implementation (you should adjust this according to your requirements):
    interface_sections = re.split(r'\n(?=\S)', file_contents)
    parsed_data = []
    for section in interface_sections:
        # Example of extracting interface name; add more extraction logic as needed
        interface_name_match = re.search(r'^(\S+) is', section, re.MULTILINE)
        if interface_name_match:
            interface_name = interface_name_match.group(1)
            # Add other details extraction here
            data = {'interface_name': interface_name}  # Extend this dictionary with other extracted details
            parsed_data.append(data)
    return parsed_data

def extract_to_csv():
    input_file_path = input_path_entry.get()
    output_file_path = output_path_entry.get()
    
    if not input_file_path or not output_file_path:
        messagebox.showwarning("Warning", "Please specify both input and output file paths.")
        return
    
    try:
        with open(input_file_path, 'r') as file:
            file_contents = file.read()
        parsed_data = parse_interfaces_with_speed(file_contents)
        
        # Define the new columns, including separate columns for interface details
        csv_columns = ['interface_name']  # Extend this list with other columns names
        with open(output_file_path, mode='w', newline='') as file:
            writer = csv.DictWriter(file, fieldnames=csv_columns)
            writer.writeheader()
            for data in parsed_data:
                writer.writerow(data)
        
        messagebox.showinfo("Success", "Data has been successfully extracted to the CSV file.")
    except Exception as e:
        messagebox.showerror("Error", str(e))

# Setting up the GUI window
root = tk.Tk()
root.title("Interface Data Extractor  - By Amit Hiremath")

# Input file entry
tk.Label(root, text="Input File Path:").grid(row=0, column=0, padx=4, pady=4)
input_path_entry = tk.Entry(root, width=50)
input_path_entry.grid(row=0, column=1, padx=4, pady=4)

# Output file entry
tk.Label(root, text="Output CSV File Path:").grid(row=1, column=0, padx=4, pady=4)
output_path_entry = tk.Entry(root, width=50)
output_path_entry.grid(row=1, column=1, padx=4, pady=4)

# Extract button
extract_button = tk.Button(root, text="Extract to Excel", command=extract_to_csv)
extract_button.grid(row=2, column=1, padx=4, pady=4, sticky=tk.W+tk.E)

# Running the GUI
root.mainloop()

#In the parse_interfaces_with_speed function, you need to implement the logic to parse the text and extract the necessary details. The example provided in the function is very basic and only extracts the interface name. You should modify this to include all the parsing logic you need, as per your requirements.

